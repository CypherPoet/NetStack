#if !canImport(ObjectiveC)
import XCTest

extension EndpointTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__EndpointTests = [
        ("test_init_setsDefaultScheme", test_init_setsDefaultScheme),
        ("test_init_withBadPath_computesNoURL", test_init_withBadPath_computesNoURL),
        ("test_init_withHostAndPath_computesURL", test_init_withHostAndPath_computesURL),
    ]
}

extension FormEncoderTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__FormEncoderTests = [
        ("testFormEncoder_encode_withAlphaNumericKeysAndValues_createsDataFromEncodedStringThatAllowsAlphanumerics", testFormEncoder_encode_withAlphaNumericKeysAndValues_createsDataFromEncodedStringThatAllowsAlphanumerics),
        ("testFormEncoder_encode_withEmojiValue_createsDataFromEncodedStringThatEscapesEmoji", testFormEncoder_encode_withEmojiValue_createsDataFromEncodedStringThatEscapesEmoji),
        ("testFormEncoder_encode_withEmptyDictionary_createsDataFromEncodedEmptyString", testFormEncoder_encode_withEmptyDictionary_createsDataFromEncodedEmptyString),
        ("testFormEncoder_encode_withEmptyValues_createsDataFromEncodedEmptyValueString", testFormEncoder_encode_withEmptyValues_createsDataFromEncodedEmptyValueString),
    ]
}

extension ModelTransportRequestPublisherTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ModelTransportRequestPublisherTests = [
        ("test_EncodeDataForModel_CreatesEncodedData", test_EncodeDataForModel_CreatesEncodedData),
        ("test_EncodeDataForModelIntoBodyOfRequest_EncodesDataAndSetsItOnARequestBody", test_EncodeDataForModelIntoBodyOfRequest_EncodesDataAndSetsItOnARequestBody),
        ("test_SendEncodedDataForModelInBodyOfRequest_EncodesDataAndPerformsAPost", test_SendEncodedDataForModelInBodyOfRequest_EncodesDataAndPerformsAPost),
    ]
}

extension NetworkResponseTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__NetworkResponseTests = [
        ("testNetworkResponse_message_usesLocalizedStringForStatusCode", testNetworkResponse_message_usesLocalizedStringForStatusCode),
        ("testNetworkResponse_status_usesResponseStatusCode", testNetworkResponse_status_usesResponseStatusCode),
    ]
}

extension TransportRequestPublisherTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__TransportRequestPublisherTests = [
        ("test_Perform_GivenFailingGETForData_PublishesCompletionWithNetStackError", test_Perform_GivenFailingGETForData_PublishesCompletionWithNetStackError),
        ("test_Perform_GivenSuccess_PublishesNetworkResponse", test_Perform_GivenSuccess_PublishesNetworkResponse),
        ("test_Perform_GivenSuccessfulGETForData_PublishesNetworkResponseWithDataInBody", test_Perform_GivenSuccessfulGETForData_PublishesNetworkResponseWithDataInBody),
        ("test_WhenCreated_WithDataTasker_SetsDataTasker", test_WhenCreated_WithDataTasker_SetsDataTasker),
        ("test_WhenCreated_WithDefaults_SetsDataTaskerToSharedURLSession", test_WhenCreated_WithDefaults_SetsDataTaskerToSharedURLSession),
        ("test_WhenCreated_WithDefaults_SetsSubscriptionQueueToGlobalQueue", test_WhenCreated_WithDefaults_SetsSubscriptionQueueToGlobalQueue),
        ("test_WhenCreated_WithSubscriptionQueue_SetsSubscriptionQueue", test_WhenCreated_WithSubscriptionQueue_SetsSubscriptionQueue),
    ]
}

public func __allTests() -> [XCTestCaseEntry] {
    return [
        testCase(EndpointTests.__allTests__EndpointTests),
        testCase(FormEncoderTests.__allTests__FormEncoderTests),
        testCase(ModelTransportRequestPublisherTests.__allTests__ModelTransportRequestPublisherTests),
        testCase(NetworkResponseTests.__allTests__NetworkResponseTests),
        testCase(TransportRequestPublisherTests.__allTests__TransportRequestPublisherTests),
    ]
}
#endif
