#if !canImport(ObjectiveC)
import XCTest

extension EndpointTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__EndpointTests = [
        ("test_Creation_SetsDefaultScheme", test_Creation_SetsDefaultScheme),
        ("test_Creation_WithHostAndValidPath_ComputesURL", test_Creation_WithHostAndValidPath_ComputesURL),
    ]
}

extension FileRequestPublisherTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__FileRequestPublisherTests = [
        ("test_Creation_WithDataTasker_SetsDataTasker", test_Creation_WithDataTasker_SetsDataTasker),
        ("test_Creation_WithDefaults_SetsDataTaskerToSharedURLSession", test_Creation_WithDefaults_SetsDataTaskerToSharedURLSession),
        ("test_Creation_WithDefaults_SetsSubscriptionQueueToGlobalQueue", test_Creation_WithDefaults_SetsSubscriptionQueueToGlobalQueue),
        ("test_Creation_WithSubscriptionQueue_SetsSubscriptionQueue", test_Creation_WithSubscriptionQueue_SetsSubscriptionQueue),
        ("test_PerformRequest_WhenFailed_PublishesCompletionWithFileLoadingError", test_PerformRequest_WhenFailed_PublishesCompletionWithFileLoadingError),
        ("test_PerformRequestForJSONFile_WhenSuccessful_PublishesFileResponse", test_PerformRequestForJSONFile_WhenSuccessful_PublishesFileResponse),
        ("test_PerformRequestForTxtFile_WhenSuccessful_PublishesFileResponse", test_PerformRequestForTxtFile_WhenSuccessful_PublishesFileResponse),
    ]
}

extension FormEncoderTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__FormEncoderTests = [
        ("test_Encode_WithAlphaNumericKeysAndValues_CreatesDataFromEncodedStringThatAllowsAlphanumerics", test_Encode_WithAlphaNumericKeysAndValues_CreatesDataFromEncodedStringThatAllowsAlphanumerics),
        ("test_Encode_WithEmojiValue_CreatesDataFromEncodedStringThatEscapesEmoji", test_Encode_WithEmojiValue_CreatesDataFromEncodedStringThatEscapesEmoji),
        ("test_Encode_WithEmptyDictionary_CreatesDataFromEncodedEmptyString", test_Encode_WithEmptyDictionary_CreatesDataFromEncodedEmptyString),
        ("test_Encode_WithEmptyValues_CreatesDataFromEncodedEmptyValueString", test_Encode_WithEmptyValues_CreatesDataFromEncodedEmptyValueString),
    ]
}

extension JSONDataLoaderTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__JSONDataLoaderTests = [
        ("test_LoadFromBundleFile_PublishesData", test_LoadFromBundleFile_PublishesData),
        ("test_LoadFromBundleFile_WhenFileDoesntExist_FailsWithFileNotFoundError", test_LoadFromBundleFile_WhenFileDoesntExist_FailsWithFileNotFoundError),
        ("test_LoadFromBundleFile_WhenURLErrorOccurs_FailsWithNetworkError", test_LoadFromBundleFile_WhenURLErrorOccurs_FailsWithNetworkError),
    ]
}

extension ModelTransportRequestPublisherTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ModelTransportRequestPublisherTests = [
        ("test_EncodeDataForModel_CreatesEncodedData", test_EncodeDataForModel_CreatesEncodedData),
        ("test_EncodeDataForModelIntoBodyOfRequest_EncodesDataAndSetsItOnARequestBody", test_EncodeDataForModelIntoBodyOfRequest_EncodesDataAndSetsItOnARequestBody),
        ("test_SendEncodedDataForModelInBodyOfRequest_EncodesDataAndPerformsAPost", test_SendEncodedDataForModelInBodyOfRequest_EncodesDataAndPerformsAPost),
    ]
}

extension NetworkResponseTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__NetworkResponseTests = [
        ("test_Header_UsesAllHeaderFieldsOnResponse", test_Header_UsesAllHeaderFieldsOnResponse),
        ("test_Message_UsesLocalizedStringForStatusCode", test_Message_UsesLocalizedStringForStatusCode),
        ("test_Status_UsesResponseStatusCode", test_Status_UsesResponseStatusCode),
    ]
}

extension TransportRequestPublisherTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__TransportRequestPublisherTests = [
        ("test_PerformGETRequest_WhenFailed_PublishesCompletionWithNetworkError", test_PerformGETRequest_WhenFailed_PublishesCompletionWithNetworkError),
        ("test_PerformGETRequest_WhenSuccessful_PublishesNetworkResponse", test_PerformGETRequest_WhenSuccessful_PublishesNetworkResponse),
        ("test_WhenCreated_WithDataTasker_SetsDataTasker", test_WhenCreated_WithDataTasker_SetsDataTasker),
        ("test_WhenCreated_WithDefaults_SetsDataTaskerToSharedURLSession", test_WhenCreated_WithDefaults_SetsDataTaskerToSharedURLSession),
        ("test_WhenCreated_WithDefaults_SetsSubscriptionQueueToGlobalQueue", test_WhenCreated_WithDefaults_SetsSubscriptionQueueToGlobalQueue),
        ("test_WhenCreated_WithSubscriptionQueue_SetsSubscriptionQueue", test_WhenCreated_WithSubscriptionQueue_SetsSubscriptionQueue),
    ]
}

public func __allTests() -> [XCTestCaseEntry] {
    return [
        testCase(EndpointTests.__allTests__EndpointTests),
        testCase(FileRequestPublisherTests.__allTests__FileRequestPublisherTests),
        testCase(FormEncoderTests.__allTests__FormEncoderTests),
        testCase(JSONDataLoaderTests.__allTests__JSONDataLoaderTests),
        testCase(ModelTransportRequestPublisherTests.__allTests__ModelTransportRequestPublisherTests),
        testCase(NetworkResponseTests.__allTests__NetworkResponseTests),
        testCase(TransportRequestPublisherTests.__allTests__TransportRequestPublisherTests),
    ]
}
#endif
